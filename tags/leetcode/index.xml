<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 打工人日记</title>
    <link>https://linjinbao.github.io/tags/leetcode/</link>
    <description>Recent content in LeetCode on 打工人日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linjinbao.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>整数传罗马数字</title>
      <link>https://linjinbao.github.io/2019/20191023-zheng-shu-chuan-luo-ma-shu-zi/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20191023-zheng-shu-chuan-luo-ma-shu-zi/</guid>
      <description>整数传罗马数字-leetcode算法题 题目描述
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>整数传罗马数字</title>
      <link>https://linjinbao.github.io/2019/%E6%95%B4%E6%95%B0%E4%BC%A0%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E6%95%B4%E6%95%B0%E4%BC%A0%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>整数传罗马数字-leetcode算法题 题目描述
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符 数值I 1V 5X 10L 50C 100D 500M 1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>最长公共前缀</title>
      <link>https://linjinbao.github.io/2019/20191023-zui-chang-gong-gong-qian-zhui/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20191023-zui-chang-gong-gong-qian-zhui/</guid>
      <description>LeetCode 算法题-最长公共前缀 题目描述： 编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 &amp;ldquo;&amp;quot;。
示例 1: 输入: [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] 输出: &amp;#34;fl&amp;#34; 示例 2: 输入: [&amp;#34;dog&amp;#34;,&amp;#34;racecar&amp;#34;,&amp;#34;car&amp;#34;] 输出: &amp;#34;&amp;#34; 解释: 输入不存在公共前缀。 说明:
所有输入只包含小写字母 a-z 。
题目分析  假设字符串数组的第一个全部作为结果 逐步缩短  代码示例 package easy; /** * 最长公共前缀 */ public class E14 { public String longestCommonPrefix(String[] strs) { int len = strs.length; if (len==0) return &amp;#34;&amp;#34;; if (len==1) return strs[0]; String str = strs[0]; for (int i=1; i &amp;lt; strs.length; i++){ while (strs[i].indexOf(str)!=0){ str = str.</description>
    </item>
    
    <item>
      <title>最长公共前缀</title>
      <link>https://linjinbao.github.io/2019/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>LeetCode 算法题-最长公共前缀 题目描述： 编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 &amp;ldquo;&amp;quot;。
示例 1:输入: [&amp;quot;flower&amp;quot;,&amp;quot;flow&amp;quot;,&amp;quot;flight&amp;quot;]输出: &amp;quot;fl&amp;quot;示例 2:输入: [&amp;quot;dog&amp;quot;,&amp;quot;racecar&amp;quot;,&amp;quot;car&amp;quot;]输出: &amp;quot;&amp;quot;解释: 输入不存在公共前缀。说明:
所有输入只包含小写字母 a-z 。
题目分析  假设字符串数组的第一个全部作为结果 逐步缩短  代码示例 package easy;/*** 最长公共前缀*/public class E14 {public String longestCommonPrefix(String[] strs) {int len = strs.length;if (len==0) return &amp;quot;&amp;quot;;if (len==1) return strs[0];String str = strs[0];for (int i=1; i &amp;lt; strs.length; i++){while (strs[i].indexOf(str)!=0){str = str.</description>
    </item>
    
    <item>
      <title>寻找两个有序数组的中位数</title>
      <link>https://linjinbao.github.io/2019/20191012-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20191012-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/</guid>
      <description>2019-10-12-寻找两个有序数组的中位数 题目描述： 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
示例 1:
nums1 = [1, 3] nums2 = [2] 则中位数是 2.0 示例 2:
nums1 = [1, 2] nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 分析解答 这个题目是LeetCode上的hard题目，我的想法很简单，找出所有情况，可以提前结束循环的，就立即退出。 大概有以下几种：
 len1==0,len2!=0 len1!=0,len2==0 len1+len2为奇数 len1+len2为偶数  代码实现： package hard; import org.omg.PortableInterceptor.SYSTEM_EXCEPTION; /** * 寻找两个有序数组的中位数 */ public class H4 { public static double findMedianSortedArrays(int[] nums1, int[] nums2) { int len1 = nums1.</description>
    </item>
    
    <item>
      <title>寻找两个有序数组的中位数</title>
      <link>https://linjinbao.github.io/2019/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>题目描述： 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
示例 1:
nums1 = [1, 3]nums2 = [2]则中位数是 2.0示例 2:
nums1 = [1, 2]nums2 = [3, 4]则中位数是 (2 + 3)/2 = 2.5分析解答 这个题目是LeetCode上的hard题目，我的想法很简单，找出所有情况，可以提前结束循环的，就立即退出。 大概有以下几种：
 len1==0,len2!=0 len1!=0,len2==0 len1+len2为奇数 len1+len2为偶数  代码实现： package hard;import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;/*** 寻找两个有序数组的中位数*/ public class H4 {public static double findMedianSortedArrays(int[] nums1, int[] nums2) {int len1 = nums1.</description>
    </item>
    
    <item>
      <title>LeetCode周赛-第 156 场</title>
      <link>https://linjinbao.github.io/2019/20190929leetcode-zhou-sai-di-156-chang/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20190929leetcode-zhou-sai-di-156-chang/</guid>
      <description>LeetCode周赛-第 156 场  排名630 / 1432
 题目名称：
独一无二的出现次数
题目描述：
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。
示例 1：
输入：arr = [1,2,2,1,1,3] 输出：true 解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。 示例 2：
输入：arr = [1,2] 输出：false 提示：
 1 &amp;lt;= arr.length &amp;lt;= 1000 -1000 &amp;lt;= arr[i] &amp;lt;= 1000  解法思路： 第一步，用Map存储所有出现的字符以及出现的次数，第二部，使用Set将字符出现的次数进行比较，出现重复，则返回false。
代码：
public boolean uniqueOccurrences(int[] arr) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i=0;i&amp;lt;arr.length;i++){ if (map.containsKey(arr[i])){ int value = map.</description>
    </item>
    
    <item>
      <title>LeetCode周赛-第 156 场</title>
      <link>https://linjinbao.github.io/2019/leetcode%E5%91%A8%E8%B5%9B-%E7%AC%AC-156-%E5%9C%BA/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/leetcode%E5%91%A8%E8%B5%9B-%E7%AC%AC-156-%E5%9C%BA/</guid>
      <description>LeetCode周赛-第 156 场  排名630 / 1432
 题目名称：
独一无二的出现次数
题目描述：
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。
示例 1：
输入：arr = [1,2,2,1,1,3]输出：true解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。示例 2：
输入：arr = [1,2]输出：false提示：
 1 &amp;lt;= arr.length &amp;lt;= 1000 -1000 &amp;lt;= arr[i] &amp;lt;= 1000  解法思路： 第一步，用Map存储所有出现的字符以及出现的次数，第二部，使用Set将字符出现的次数进行比较，出现重复，则返回false。
代码：
public boolean uniqueOccurrences(int[] arr) {Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();for (int i=0;i&amp;lt;arr.length;i++){if (map.containsKey(arr[i])){int value = map.</description>
    </item>
    
    <item>
      <title>LeetCode算法题-合并区间</title>
      <link>https://linjinbao.github.io/2019/2019-09-27-leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-27-leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</guid>
      <description>2019-09-27-LeetCode算法题-合并区间 LeetCode算法题-合并区间 题目描述： 给出一个区间的集合，请合并所有重叠的区间。
示例 1: 输入: [[1,3],[2,6],[8,10],[15,18]] 输出: [[1,6],[8,10],[15,18]] 解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6]. 示例 2: 输入: [[1,4],[4,5]] 输出: [[1,5]] 解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。 思路分析：
  对给出的二维数组进行排序，使得满足每一组第一个元素都小于等于后面一组第一个元素，例如这种形式：[[1,3],[2,6],[8,10]]。
[[1,3],[8,10],[2,6]]这种形式则需要调整。
  贪心给出一个新的结果二维数组，每次去和已知数组比较，发生重合则重组后加入结果数组，否则则将已知数组的拷贝过来。
  代码如下：
public static int[][] merge(int[][] intervals) { if (intervals.length==0) return new int[][]{}; if (intervals.length ==1) return intervals; //处理输入，使得每一个里面的第一个元素递增  for (int i=0; i&amp;lt;intervals.length-1; i++){ for (int j=0; j&amp;lt;intervals.length-1-i; j++){ if (intervals[j][0] &amp;gt; intervals[j+1][0]){ int[] tmp = intervals[j]; intervals[j] = intervals[j+1]; intervals[j+1] = tmp; } } } int[][] out = new int[intervals.</description>
    </item>
    
    <item>
      <title>LeetCode算法题-合并区间</title>
      <link>https://linjinbao.github.io/2019/leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</guid>
      <description>LeetCode算法题-合并区间 题目描述： 给出一个区间的集合，请合并所有重叠的区间。
示例 1:输入: [[1,3],[2,6],[8,10],[15,18]]输出: [[1,6],[8,10],[15,18]]解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].示例 2:输入: [[1,4],[4,5]]输出: [[1,5]]解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。思路分析：
 对给出的二维数组进行排序，使得满足每一组第一个元素都小于等于后面一组第一个元素，例如这种形式：[[1,3],[2,6],[8,10]]。 [[1,3],[8,10],[2,6]]这种形式则需要调整。 贪心给出一个新的结果二维数组，每次去和已知数组比较，发生重合则重组后加入结果数组，否则则将已知数组的拷贝过来。  代码如下：
public static int[][] merge(int[][] intervals) {if (intervals.length==0) return new int[][]{};if (intervals.length ==1) return intervals;//处理输入，使得每一个里面的第一个元素递增 for (int i=0; i&amp;lt;intervals.length-1; i++){for (int j=0; j&amp;lt;intervals.length-1-i; j++){if (intervals[j][0] &amp;gt; intervals[j+1][0]){int[] tmp = intervals[j];intervals[j] = intervals[j+1];intervals[j+1] = tmp;}}}int[][] out = new int[intervals.</description>
    </item>
    
    <item>
      <title>第155场周赛--LeetCode</title>
      <link>https://linjinbao.github.io/2019/2019-09-22-%E7%AC%AC155%E5%9C%BA%E5%91%A8%E8%B5%9B/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-22-%E7%AC%AC155%E5%9C%BA%E5%91%A8%E8%B5%9B/</guid>
      <description>第 155 场周赛&amp;ndash;LeetCode 第一题：最小绝对差 题目描述： 给你个整数数组 arr，其中每个元素都 不相同。 请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。 示例 1：
输入：arr = [4,2,1,3] 输出：[[1,2],[2,3],[3,4]] 示例 2：
输入：arr = [1,3,6,10,15] 输出：[[1,3]] 示例 3：
输入：arr = [3,8,-10,23,19,-4,-14,27] 输出：[[-14,-10],[19,23],[23,27]] 提示：
 2 &amp;lt;= arr.length &amp;lt;= 10^5 -10^6 &amp;lt;= arr[i] &amp;lt;= 10^6  分析 先排序，遍历算最小差值
代码实现
package compete; import java.util.ArrayList; import java.util.Arrays; import java.util.List; /** * 最小绝对差 */ public class C5197 { public static List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; minimumAbsDifference(int[] arr) { if (arr.length&amp;lt;2) return null; Arrays.sort(arr); for (int i : arr){ System.</description>
    </item>
    
    <item>
      <title>第155场周赛--LeetCode</title>
      <link>https://linjinbao.github.io/2019/%E7%AC%AC-155-%E5%9C%BA%E5%91%A8%E8%B5%9B/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E7%AC%AC-155-%E5%9C%BA%E5%91%A8%E8%B5%9B/</guid>
      <description>第 155 场周赛&amp;ndash;LeetCode 第一题：最小绝对差 题目描述： 给你个整数数组 arr，其中每个元素都 不相同。 请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。 示例 1：
输入：arr = [4,2,1,3]输出：[[1,2],[2,3],[3,4]] 示例 2：
输入：arr = [1,3,6,10,15]输出：[[1,3]] 示例 3：
输入：arr = [3,8,-10,23,19,-4,-14,27]输出：[[-14,-10],[19,23],[23,27]] 提示：
 2 &amp;lt;= arr.length &amp;lt;= 10^5 -10^6 &amp;lt;= arr[i] &amp;lt;= 10^6  分析 先排序，遍历算最小差值
代码实现
package compete;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/*** 最小绝对差*/ public class C5197 {public static List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; minimumAbsDifference(int[] arr) {if (arr.length&amp;lt;2) return null;Arrays.</description>
    </item>
    
  </channel>
</rss>