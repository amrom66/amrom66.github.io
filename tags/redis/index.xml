<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 打工人日记</title>
    <link>https://linjinbao.github.io/tags/redis/</link>
    <description>Recent content in Redis on 打工人日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linjinbao.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>redis笔记</title>
      <link>https://linjinbao.github.io/2020/20200126redis-bi-ji/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2020/20200126redis-bi-ji/</guid>
      <description>redis笔记 概述 Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</description>
    </item>
    
    <item>
      <title>redis集群搭建笔记</title>
      <link>https://linjinbao.github.io/2020/20200120redis-ji-qun-da-jian-bi-ji/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2020/20200120redis-ji-qun-da-jian-bi-ji/</guid>
      <description>redis集群搭建笔记 下载redis源码 wget http://download.redis.io/releases/redis-5.0.7.tar.gz tar -xvf redis-5.0.7.tar.gz 编译安装redis yum install gcc-c++ cd redis-5.0.7 make install PREFIX=/root/redis 准备文件夹 mkdir /root/redis-cluster mkdir /root/redis-cluster/redis01 mkdir /root/redis-cluster/redis02 mkdir /root/redis-cluster/redis03 mkdir /root/redis-cluster/redis04 mkdir /root/redis-cluster/redis05 mkdir /root/redis-cluster/redis06 整理配置文件 将/root/redis/bin中的所有文件复制到redis01-06中， /root/redis-cluster/redis01/redis.conf文件内容修改
port 7001 cluster-enabled yes 删除快照文件dump.rdb redis02-redis06类似
编写脚本同时启动6个redis服务 start-all.sh
cd redis01 ./redis-server redis.conf &amp;amp; cd .. cd redis02 ./redis-server redis.conf &amp;amp; cd .. cd redis03 ./redis-server redis.conf &amp;amp; cd .. cd redis04 ./redis-server redis.conf &amp;amp; cd .. cd redis05 .</description>
    </item>
    
    <item>
      <title>Redis笔记</title>
      <link>https://linjinbao.github.io/2019/2019-07-29-redis%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-07-29-redis%E7%AC%94%E8%AE%B0/</guid>
      <description>Redis笔记 key-value结构 Redis目前有5种数据类型，分别是：
String（字符串） List（列表） Hash（字典） Set（集合） Sorted Set（有序集合） 不同的数据类型，有不同的命令方式
String 操作
set google http://www.google append google .com get google set visitors 0 incr visitors incr visitors get visitors incrby visitors 100 get visitors type google type visitors ttl google rename google google-site get google get google-site String 手册
SET key value 设置key=value GET key 获得键key对应的值 GETRANGE key start end 得到字符串的子字符串存放在一个键 GETSET key value 设置键的字符串值，并返回旧值 GETBIT key offset 返回存储在键位值的字符串值的偏移 MGET key1 [key2.</description>
    </item>
    
    <item>
      <title>Redis笔记</title>
      <link>https://linjinbao.github.io/2019/redis%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/redis%E7%AC%94%E8%AE%B0/</guid>
      <description>key -value结构 Redis目前有5种数据类型，分别是：
String（字符串）List（列表）Hash（字典）Set（集合）Sorted Set（有序集合）不同的数据类型，有不同的命令方式
String 操作
set google http://www.googleappend google .comget googleset visitors 0incr visitorsincr visitorsget visitorsincrby visitors 100get visitorstype googletype visitorsttl googlerename google google-siteget googleget google-siteString 手册
SET key value 设置key=valueGET key 获得键key对应的值GETRANGE key start end 得到字符串的子字符串存放在一个键GETSET key value 设置键的字符串值，并返回旧值GETBIT key offset 返回存储在键位值的字符串值的偏移MGET key1 [key2.</description>
    </item>
    
  </channel>
</rss>