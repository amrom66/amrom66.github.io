<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 打工人日记</title>
    <link>https://linjinbao.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 打工人日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linjinbao.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode题目-罗马数字转整数</title>
      <link>https://linjinbao.github.io/2019/2019-10-16-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-10-16-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>2019-10-16-罗马数字转整数 题目描述 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>寻找两个有序数组的中位数</title>
      <link>https://linjinbao.github.io/2019/2019-10-12-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-10-12-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>2019-10-12-寻找两个有序数组的中位数 题目描述： 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
示例 1:
nums1 = [1, 3] nums2 = [2] 则中位数是 2.0 示例 2:
nums1 = [1, 2] nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 分析解答 这个题目是LeetCode上的hard题目，我的想法很简单，找出所有情况，可以提前结束循环的，就立即退出。 大概有以下几种：
 len1==0,len2!=0 len1!=0,len2==0 len1+len2为奇数 len1+len2为偶数  代码实现： package hard; import org.omg.PortableInterceptor.SYSTEM_EXCEPTION; /** * 寻找两个有序数组的中位数 */ public class H4 { public static double findMedianSortedArrays(int[] nums1, int[] nums2) { int len1 = nums1.</description>
    </item>
    
    <item>
      <title>牛客网题目-栈的压入、弹出序列</title>
      <link>https://linjinbao.github.io/2019/2019-10-11-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-10-11-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</guid>
      <description>2019-10-11-栈的压入、弹出序列 题目描述 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
分析 1.辅助栈 2.找到弹出的位置
代码实现 package nowcoder; import java.util.Stack; /** * 栈的压入、弹出序列 */ public class IsPopOrder { public boolean isPopOrder(int [] pushA,int [] popA) { if (pushA.length==0 || popA.length==0) return false; Stack&amp;lt;Integer&amp;gt; stack = new Stack(); int popIndex = 0; for (int i=0; i&amp;lt; pushA.length; i++){ stack.push(pushA[i]); while (!stack.isEmpty() &amp;amp;&amp;amp; stack.peek()==popA[popIndex]){ stack.pop(); popIndex++; } } return stack.isEmpty(); } } </description>
    </item>
    
    <item>
      <title>包含min函数的栈</title>
      <link>https://linjinbao.github.io/2019/2019-10-10-%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-10-10-%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</guid>
      <description>牛客网题目-包含min函数的栈 题目描述 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。
解法一 双栈实现，数据栈加最小值栈 代码如下：
import java.util.Stack; public class Solution { Stack&amp;lt;Integer&amp;gt; dataStack = new Stack(); Stack&amp;lt;Integer&amp;gt; minStack = new Stack&amp;lt;&amp;gt;(); public void push(int node) { dataStack.push(node); if (minStack.isEmpty() || node&amp;lt;minStack.peek())minStack.push(node); else minStack.push(minStack.peek()); } public void pop() { dataStack.pop(); minStack.pop(); } public int top() { return dataStack.peek(); } public int min() { return minStack.peek(); //辅助栈取值  } } 解法二 栈+ArrayList实现 代码如下：
import java.util.Stack; import java.util.ArrayList; import java.util.List; public class Solution { Stack&amp;lt;Integer&amp;gt; dataStack = new Stack(); List&amp;lt;Integer&amp;gt; minList = new ArrayList&amp;lt;&amp;gt;(); public void push(int node) { dataStack.</description>
    </item>
    
    <item>
      <title>LeetCode周赛-第 156 场</title>
      <link>https://linjinbao.github.io/2019/2019-09-29-leetcode-156/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-29-leetcode-156/</guid>
      <description>LeetCode周赛-第 156 场  排名630 / 1432
 题目名称：
独一无二的出现次数
题目描述：
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。
示例 1：
输入：arr = [1,2,2,1,1,3] 输出：true 解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。 示例 2：
输入：arr = [1,2] 输出：false 提示：
 1 &amp;lt;= arr.length &amp;lt;= 1000 -1000 &amp;lt;= arr[i] &amp;lt;= 1000  解法思路： 第一步，用Map存储所有出现的字符以及出现的次数，第二部，使用Set将字符出现的次数进行比较，出现重复，则返回false。
代码：
public boolean uniqueOccurrences(int[] arr) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i=0;i&amp;lt;arr.length;i++){ if (map.containsKey(arr[i])){ int value = map.</description>
    </item>
    
    <item>
      <title>LeetCode算法题-合并区间</title>
      <link>https://linjinbao.github.io/2019/2019-09-27-leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-27-leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</guid>
      <description>2019-09-27-LeetCode算法题-合并区间 LeetCode算法题-合并区间 题目描述： 给出一个区间的集合，请合并所有重叠的区间。
示例 1: 输入: [[1,3],[2,6],[8,10],[15,18]] 输出: [[1,6],[8,10],[15,18]] 解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6]. 示例 2: 输入: [[1,4],[4,5]] 输出: [[1,5]] 解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。 思路分析：
  对给出的二维数组进行排序，使得满足每一组第一个元素都小于等于后面一组第一个元素，例如这种形式：[[1,3],[2,6],[8,10]]。
[[1,3],[8,10],[2,6]]这种形式则需要调整。
  贪心给出一个新的结果二维数组，每次去和已知数组比较，发生重合则重组后加入结果数组，否则则将已知数组的拷贝过来。
  代码如下：
public static int[][] merge(int[][] intervals) { if (intervals.length==0) return new int[][]{}; if (intervals.length ==1) return intervals; //处理输入，使得每一个里面的第一个元素递增  for (int i=0; i&amp;lt;intervals.length-1; i++){ for (int j=0; j&amp;lt;intervals.length-1-i; j++){ if (intervals[j][0] &amp;gt; intervals[j+1][0]){ int[] tmp = intervals[j]; intervals[j] = intervals[j+1]; intervals[j+1] = tmp; } } } int[][] out = new int[intervals.</description>
    </item>
    
    <item>
      <title>牛客网-二叉树的镜像</title>
      <link>https://linjinbao.github.io/2019/2019-09-26-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-26-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%95%9C%E5%83%8F/</guid>
      <description>二叉树镜像 题目描述 操作给定的二叉树，将其变换为源二叉树的镜像。
分析： 想到递归，对每一个节点有4种情况：
 当前节点为空 当前节点不为空，左子树为空 当前节点不为空，右子树为空 当前节点不为空，左右子树都为空  很显然2,3两点可以重合
那么递归退出条件就是1和4
代码 代码如下，测试通过
public static void mirror(TreeNode root) { if (root==null)return; if (root.left==null &amp;amp;&amp;amp; root.right==null) return; TreeNode tmp = root.left; root.left = root.right; root.right = tmp; mirror(root.left); mirror(root.right); } 总结 二叉树的递归，遵循以下几步：
 找出所有情况 确定退出条件 确定一般递归内容  这一题题目现在看来不难，但是我一开始想偏了，想利用一个辅助函数helper(TreeNode left, TreeNode right)来递归他的左子树和右子树，但是问题在于，每次交换左右子树都变化了，结果就是对于满二叉树可以完成，但是对于不是满二叉树就不行
欢迎大家转载我的博客菜鸡聪。 如果希望交流算法，欢迎联系我， Gmail</description>
    </item>
    
    <item>
      <title>牛客网题目-树的子结构</title>
      <link>https://linjinbao.github.io/2019/2019-09-25-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-25-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</guid>
      <description>2019-09-25-树的子结构 题目名称：树的子结构 题目描述 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
分析： 第一想法是递归，只要是树，我就上递归。分析情况有以下3种：
 当前root1节点=当前root2节点 当前root1节点！=当前root2节点，但是root1.left和root2节点相等 当前root1节点！=当前root2节点，但是root1.right和root2节点相等  所以需要一个辅助函数helper
public static boolean hasSubtree(TreeNode root1, TreeNode root2) { if (root1==null || root2==null) return false; //三种情况  return helper(root1,root2) || hasSubtree(root1.left, root2) || hasSubtree(root1.right,root2); } //递归检查  public static boolean helper(TreeNode root1, TreeNode root2){ if (root2==null) return true; if (root1==null) return false; if (root1.val==root2.val)return helper(root1.left,root2.left)&amp;amp;&amp;amp;helper(root1.right,root2.right); return false; } 总结 遇到二叉树，递归总没错</description>
    </item>
    
    <item>
      <title>第155场周赛--LeetCode</title>
      <link>https://linjinbao.github.io/2019/2019-09-22-%E7%AC%AC155%E5%9C%BA%E5%91%A8%E8%B5%9B/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-22-%E7%AC%AC155%E5%9C%BA%E5%91%A8%E8%B5%9B/</guid>
      <description>第 155 场周赛&amp;ndash;LeetCode 第一题：最小绝对差 题目描述： 给你个整数数组 arr，其中每个元素都 不相同。 请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。 示例 1：
输入：arr = [4,2,1,3] 输出：[[1,2],[2,3],[3,4]] 示例 2：
输入：arr = [1,3,6,10,15] 输出：[[1,3]] 示例 3：
输入：arr = [3,8,-10,23,19,-4,-14,27] 输出：[[-14,-10],[19,23],[23,27]] 提示：
 2 &amp;lt;= arr.length &amp;lt;= 10^5 -10^6 &amp;lt;= arr[i] &amp;lt;= 10^6  分析 先排序，遍历算最小差值
代码实现
package compete; import java.util.ArrayList; import java.util.Arrays; import java.util.List; /** * 最小绝对差 */ public class C5197 { public static List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; minimumAbsDifference(int[] arr) { if (arr.length&amp;lt;2) return null; Arrays.sort(arr); for (int i : arr){ System.</description>
    </item>
    
    <item>
      <title>排序算法总结</title>
      <link>https://linjinbao.github.io/2019/2019-09-14-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/2019-09-14-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>排序总结 冒泡排序 原理：每次比较两个相邻的元素，将较大元素交换至右端 特点：每次循环结束，会出现一个排序好的元素，右侧 理解：大的数右移，重复此过程 代码：
public static void bubbleSort(int[] nums){ for (int i=0; i&amp;lt;nums.length-1; i++){ //第i次循环找出第i小的元素0&amp;lt;=i&amp;lt;=length-1  for (int j=0; j&amp;lt;nums.length-1-i; j++){ if (nums[j+1]&amp;lt;nums[j]){ int tmp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = tmp; } for (int num : nums) System.out.print(num+&amp;#34;\t&amp;#34;); System.out.println(); } } } 优化：使用flag标记是否已经有序
选择排序 原理：每次循环找出最小的元素于左侧，每次循环都从剩余未排序系列找出最小的元素 代码：
/** * 选择排序 * @param nums */ public static void selectSort(int[] nums){ int len = nums.length; if (len==0 || len==1) return; for (int i=0; i&amp;lt;len; i++){ for (int j=i+1; j&amp;lt;len; j++){ if (nums[j] &amp;lt; nums[i]){ int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } } } 插入排序 原理：递归思想，假设第一个有序，则新插入一个，将其排序，循环递归 代</description>
    </item>
    
  </channel>
</rss>