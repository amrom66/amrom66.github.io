<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 打工人日记</title>
    <link>https://linjinbao.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on 打工人日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linjinbao.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode题目-罗马数字转整数</title>
      <link>https://linjinbao.github.io/2019/20191016-luo-ma-shu-zi-zhuan-zheng-shu/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20191016-luo-ma-shu-zi-zhuan-zheng-shu/</guid>
      <description>2019-10-16-罗马数字转整数 题目描述 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>leetcode题目-罗马数字转整数</title>
      <link>https://linjinbao.github.io/2019/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>题目描述 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>LeetCode周赛-第 156 场</title>
      <link>https://linjinbao.github.io/2019/20190929leetcode-zhou-sai-di-156-chang/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20190929leetcode-zhou-sai-di-156-chang/</guid>
      <description>LeetCode周赛-第 156 场  排名630 / 1432
 题目名称：
独一无二的出现次数
题目描述：
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。
示例 1：
输入：arr = [1,2,2,1,1,3] 输出：true 解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。 示例 2：
输入：arr = [1,2] 输出：false 提示：
 1 &amp;lt;= arr.length &amp;lt;= 1000 -1000 &amp;lt;= arr[i] &amp;lt;= 1000  解法思路： 第一步，用Map存储所有出现的字符以及出现的次数，第二部，使用Set将字符出现的次数进行比较，出现重复，则返回false。
代码：
public boolean uniqueOccurrences(int[] arr) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i=0;i&amp;lt;arr.length;i++){ if (map.containsKey(arr[i])){ int value = map.</description>
    </item>
    
    <item>
      <title>LeetCode周赛-第 156 场</title>
      <link>https://linjinbao.github.io/2019/leetcode%E5%91%A8%E8%B5%9B-%E7%AC%AC-156-%E5%9C%BA/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/leetcode%E5%91%A8%E8%B5%9B-%E7%AC%AC-156-%E5%9C%BA/</guid>
      <description>LeetCode周赛-第 156 场  排名630 / 1432
 题目名称：
独一无二的出现次数
题目描述：
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。
示例 1：
输入：arr = [1,2,2,1,1,3]输出：true解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。示例 2：
输入：arr = [1,2]输出：false提示：
 1 &amp;lt;= arr.length &amp;lt;= 1000 -1000 &amp;lt;= arr[i] &amp;lt;= 1000  解法思路： 第一步，用Map存储所有出现的字符以及出现的次数，第二部，使用Set将字符出现的次数进行比较，出现重复，则返回false。
代码：
public boolean uniqueOccurrences(int[] arr) {Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();for (int i=0;i&amp;lt;arr.length;i++){if (map.containsKey(arr[i])){int value = map.</description>
    </item>
    
    <item>
      <title>LeetCode算法题-合并区间</title>
      <link>https://linjinbao.github.io/2019/20190927leetcode-suan-fa-ti-he-bing-qu-jian/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20190927leetcode-suan-fa-ti-he-bing-qu-jian/</guid>
      <description>2019-09-27-LeetCode算法题-合并区间 LeetCode算法题-合并区间 题目描述： 给出一个区间的集合，请合并所有重叠的区间。
示例 1: 输入: [[1,3],[2,6],[8,10],[15,18]] 输出: [[1,6],[8,10],[15,18]] 解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6]. 示例 2: 输入: [[1,4],[4,5]] 输出: [[1,5]] 解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。 思路分析：
  对给出的二维数组进行排序，使得满足每一组第一个元素都小于等于后面一组第一个元素，例如这种形式：[[1,3],[2,6],[8,10]]。
[[1,3],[8,10],[2,6]]这种形式则需要调整。
  贪心给出一个新的结果二维数组，每次去和已知数组比较，发生重合则重组后加入结果数组，否则则将已知数组的拷贝过来。
  代码如下：
public static int[][] merge(int[][] intervals) { if (intervals.length==0) return new int[][]{}; if (intervals.length ==1) return intervals; //处理输入，使得每一个里面的第一个元素递增  for (int i=0; i&amp;lt;intervals.length-1; i++){ for (int j=0; j&amp;lt;intervals.length-1-i; j++){ if (intervals[j][0] &amp;gt; intervals[j+1][0]){ int[] tmp = intervals[j]; intervals[j] = intervals[j+1]; intervals[j+1] = tmp; } } } int[][] out = new int[intervals.</description>
    </item>
    
    <item>
      <title>LeetCode算法题-合并区间</title>
      <link>https://linjinbao.github.io/2019/leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/leetcode%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</guid>
      <description>LeetCode算法题-合并区间 题目描述： 给出一个区间的集合，请合并所有重叠的区间。
示例 1:输入: [[1,3],[2,6],[8,10],[15,18]]输出: [[1,6],[8,10],[15,18]]解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].示例 2:输入: [[1,4],[4,5]]输出: [[1,5]]解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。思路分析：
 对给出的二维数组进行排序，使得满足每一组第一个元素都小于等于后面一组第一个元素，例如这种形式：[[1,3],[2,6],[8,10]]。 [[1,3],[8,10],[2,6]]这种形式则需要调整。 贪心给出一个新的结果二维数组，每次去和已知数组比较，发生重合则重组后加入结果数组，否则则将已知数组的拷贝过来。  代码如下：
public static int[][] merge(int[][] intervals) {if (intervals.length==0) return new int[][]{};if (intervals.length ==1) return intervals;//处理输入，使得每一个里面的第一个元素递增 for (int i=0; i&amp;lt;intervals.length-1; i++){for (int j=0; j&amp;lt;intervals.length-1-i; j++){if (intervals[j][0] &amp;gt; intervals[j+1][0]){int[] tmp = intervals[j];intervals[j] = intervals[j+1];intervals[j+1] = tmp;}}}int[][] out = new int[intervals.</description>
    </item>
    
  </channel>
</rss>