<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>栈 on 打工人日记</title>
    <link>https://linjinbao.github.io/categories/%E6%A0%88/</link>
    <description>Recent content in 栈 on 打工人日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linjinbao.github.io/categories/%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>包含min函数的栈</title>
      <link>https://linjinbao.github.io/2019/20191010-niu-ke-wang-ti-mu-bao-han-min-han-shu-de-zhan/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/20191010-niu-ke-wang-ti-mu-bao-han-min-han-shu-de-zhan/</guid>
      <description>牛客网题目-包含min函数的栈 题目描述 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。
解法一 双栈实现，数据栈加最小值栈 代码如下：
import java.util.Stack; public class Solution { Stack&amp;lt;Integer&amp;gt; dataStack = new Stack(); Stack&amp;lt;Integer&amp;gt; minStack = new Stack&amp;lt;&amp;gt;(); public void push(int node) { dataStack.push(node); if (minStack.isEmpty() || node&amp;lt;minStack.peek())minStack.push(node); else minStack.push(minStack.peek()); } public void pop() { dataStack.pop(); minStack.pop(); } public int top() { return dataStack.peek(); } public int min() { return minStack.peek(); //辅助栈取值  } } 解法二 栈+ArrayList实现 代码如下：
import java.util.Stack; import java.util.ArrayList; import java.util.List; public class Solution { Stack&amp;lt;Integer&amp;gt; dataStack = new Stack(); List&amp;lt;Integer&amp;gt; minList = new ArrayList&amp;lt;&amp;gt;(); public void push(int node) { dataStack.</description>
    </item>
    
    <item>
      <title>包含min函数的栈</title>
      <link>https://linjinbao.github.io/2019/%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linjinbao.github.io/2019/%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</guid>
      <description>牛客网题目-包含min函数的栈 题目描述 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。
解法一 双栈实现，数据栈加最小值栈 代码如下：
import java.util.Stack;public class Solution {Stack&amp;lt;Integer&amp;gt; dataStack = new Stack();Stack&amp;lt;Integer&amp;gt; minStack = new Stack&amp;lt;&amp;gt;();public void push(int node) {dataStack.push(node);if (minStack.isEmpty() || node&amp;lt;minStack.peek())minStack.push(node);else minStack.push(minStack.peek());}public void pop() {dataStack.pop();minStack.pop();}public int top() {return dataStack.peek();}public int min() {return minStack.peek(); //辅助栈取值 }}解法二 栈+ArrayList实现 代码如下：
import java.util.Stack;import java.util.ArrayList;import java.util.List;public class Solution {Stack&amp;lt;Integer&amp;gt; dataStack = new Stack();List&amp;lt;Integer&amp;gt; minList = new ArrayList&amp;lt;&amp;gt;();public void push(int node) {dataStack.</description>
    </item>
    
  </channel>
</rss>